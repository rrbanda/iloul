"""
LangGraph Subgraphs for Mortgage Application Agents
Specialized agents with isolated state schemas and memory
"""

from typing import Dict, Any, List, Literal
try:
    from typing import NotRequired
except ImportError:
    from typing_extensions import NotRequired
from typing_extensions import TypedDict, Annotated
from langchain_core.messages import AnyMessage, SystemMessage, AIMessage
from langchain_core.tools import tool
from langchain_openai import ChatOpenAI
from langgraph.graph import StateGraph, START, END, MessagesState
from langgraph.graph.message import add_messages
from langgraph.prebuilt import ToolNode
# from langgraph.types import Command  # Not needed for current implementation

# Import tools from main tools module
from .tools import (
    extract_personal_info,
    extract_employment_info,
    extract_property_info,
    extract_financial_info,
    analyze_application_state,
    generate_contextual_prompts,
    generate_next_step_guidance,
    # Database tools for agentic submission
    submit_application_to_database,
    check_application_status
)

# Import prebuilt agents
from .agents import (
    create_assistant_agent,
    create_data_agent,
    create_property_agent,
    create_underwriting_agent,
    create_compliance_agent,
    create_closing_agent,
    create_customer_service_agent,
    create_application_agent
)
from .agents.document_agent import create_document_agent

# Import state schemas from state.py
from .state import AssistantAgentState, DataAgentState, PropertyAgentState, UnderwritingAgentState, ComplianceAgentState, ClosingAgentState, CustomerServiceAgentState
from .agents.application_agent import ApplicationAgentState

# ================================
# HANDOFF TOOLS - REMOVED
# ================================
# Note: Handoff tools are now automatically generated by the supervisor
# The supervisor will create transfer_to_assistant_agent and transfer_to_data_agent tools

# ================================
# ASSISTANT AGENT SUBGRAPH
# ================================

def create_assistant_agent_subgraph():
    """
    Create AssistantAgent using LangGraph's prebuilt create_react_agent
    
    This provides all the production features like memory, streaming, human-in-the-loop, etc.
    """
    return create_assistant_agent()

def create_compiled_assistant_agent():
    """Create compiled AssistantAgent for use with supervisor"""
    agent = create_assistant_agent()
    # The prebuilt agent is already compiled
    return agent

# ================================
# DATA AGENT SUBGRAPH  
# ================================

def create_data_agent_subgraph():
    """
    Create DataAgent using LangGraph's prebuilt create_react_agent
    
    This provides all the production features like memory, streaming, human-in-the-loop, etc.
    """
    return create_data_agent()

def create_compiled_data_agent():
    """Create compiled DataAgent for use with supervisor"""
    agent = create_data_agent()
    # The prebuilt agent is already compiled
    return agent

# ================================
# PROPERTY AGENT SUBGRAPH
# ================================

def create_property_agent_subgraph():
    """
    Create PropertyAgent using LangGraph's prebuilt create_react_agent
    
    This provides all the production features like memory, streaming, human-in-the-loop, etc.
    """
    return create_property_agent()

def create_compiled_property_agent():
    """Create compiled PropertyAgent for use with supervisor"""
    agent = create_property_agent()
    # The prebuilt agent is already compiled
    return agent

# ================================
# UNDERWRITING AGENT SUBGRAPH
# ================================

def create_underwriting_agent_subgraph():
    """
    Create UnderwritingAgent using LangGraph's prebuilt create_react_agent
    
    This provides all the production features like memory, streaming, human-in-the-loop, etc.
    """
    return create_underwriting_agent()

def create_compiled_underwriting_agent():
    """Create compiled UnderwritingAgent for use with supervisor"""
    agent = create_underwriting_agent()
    # The prebuilt agent is already compiled
    return agent

# ================================
# COMPLIANCE AGENT SUBGRAPH
# ================================

def create_compliance_agent_subgraph():
    """
    Create ComplianceAgent using LangGraph's prebuilt create_react_agent
    
    This provides all the production features like memory, streaming, human-in-the-loop, etc.
    """
    return create_compliance_agent()

def create_compiled_compliance_agent():
    """Create compiled ComplianceAgent for use with supervisor"""
    agent = create_compliance_agent()
    # The prebuilt agent is already compiled
    return agent

# ================================
# CLOSING AGENT SUBGRAPH
# ================================

def create_closing_agent_subgraph():
    """
    Create ClosingAgent using LangGraph's prebuilt create_react_agent
    
    This provides all the production features like memory, streaming, human-in-the-loop, etc.
    """
    return create_closing_agent()

def create_compiled_closing_agent():
    """Create compiled ClosingAgent for use with supervisor"""
    agent = create_closing_agent()
    # The prebuilt agent is already compiled
    return agent

# ================================
# CUSTOMER SERVICE AGENT SUBGRAPH
# ================================

def create_customer_service_agent_subgraph():
    """
    Create CustomerServiceAgent using LangGraph's prebuilt create_react_agent
    
    This provides all the production features like memory, streaming, human-in-the-loop, etc.
    """
    return create_customer_service_agent()

def create_compiled_customer_service_agent():
    """Create compiled CustomerServiceAgent for use with supervisor"""
    agent = create_customer_service_agent()
    # The prebuilt agent is already compiled
    return agent

# ================================
# APPLICATION AGENT SUBGRAPH
# ================================

def create_application_agent_subgraph():
    """
    Create ApplicationAgent using LangGraph's prebuilt create_react_agent
    
    Provides interactive mortgage application processing with Neo4j graph database integration.
    """
    return create_application_agent()

def create_compiled_application_agent():
    """Create compiled ApplicationAgent for use with supervisor"""
    agent = create_application_agent()
    # The prebuilt agent is already compiled
    return agent

def create_compiled_document_agent():
    """Create compiled DocumentAgent for use with supervisor"""
    agent = create_document_agent()
    # The prebuilt agent is already compiled
    return agent

# ================================
# END OF SUBGRAPHS
# ================================
